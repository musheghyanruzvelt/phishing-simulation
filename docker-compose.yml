version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=rabbit
      - RABBITMQ_DEFAULT_PASS=rabbit
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    healthcheck:
      test:
        echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  simulation-service:
    build:
      context: .
      dockerfile: apps/simulation-service/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - MONGODB_URI=mongodb://mongo:mongo@mongodb:27017/phishing?authSource=admin
      - RABBITMQ_URL=amqp://rabbit:rabbit@rabbitmq:5672
      - NODE_ENV=production
      - JWT_SECRET=your_secret_key_here
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  management-service:
    build:
      context: .
      dockerfile: apps/management-service/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - MONGODB_URI=mongodb://mongo:mongo@mongodb:27017/phishing?authSource=admin
      - RABBITMQ_URL=amqp://rabbit:rabbit@rabbitmq:5672
      - NODE_ENV=production
      - CORS_ORIGIN=http://localhost:3000
      - JWT_SECRET=your_secret_key_here
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - simulation-service
      - management-service

volumes:
  rabbitmq_data:
  mongodb_data:
